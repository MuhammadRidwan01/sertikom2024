pipeline {    agent any    environment {                GITHUB_TOKEN = credentials('25ae89e1-778f-45b2-b3e5-51b6c43f2bf2')        GITHUB_ORG = "MuhammadRidwan01"        GITHUB_REPO = "sertikom2024"                BUILD_VERSION = sh(script: 'git describe --tags --always || echo "v0.0.1"', returnStdout: true).trim()        BUILD_TIME = sh(script: 'date "+%Y-%m-%d %H:%M:%S"', returnStdout: true).trim()        BUILD_ENV = "production"     }    stages {        stage('Checkout') {            steps {                checkout scm                script {                                        sh """                        curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \                        https:                        -d '{                            "state": "pending",                            "target_url": "'${BUILD_URL}'",                            "description": "Jenkins CI/CD dimulai pada ${BUILD_TIME} untuk versi ${BUILD_VERSION} [${BUILD_ENV}]",                            "context": "Jenkins/build-and-deploy"                        }'                    """                }            }        }                stage('Install Dependencies') {            steps {                sh 'composer install --no-interaction --no-progress --no-suggest'                script {                    sh """                        curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \                        https:                        -d '{                            "state": "pending",                            "target_url": "'${BUILD_URL}'",                            "description": "Instalasi dependensi PHP selesai, melanjutkan ke tahap build frontend",                            "context": "Jenkins/dependencies"                        }'                    """                }            }        }        stage('Build Frontend Assets') {            steps {                sh 'npm install'                sh 'npm run build'                script {                    sh """                        curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \                        https:                        -d '{                            "state": "pending",                            "target_url": "'${BUILD_URL}'",                            "description": "Build frontend berhasil, mempersiapkan environment",                            "context": "Jenkins/frontend"                        }'                    """                }            }        }                stage('Setup Environment') {            steps {                sh 'cp .env.example .env'                sh 'php artisan key:generate'                sh 'php artisan migrate'            }        }        stage('Check Database') {            steps {                sh 'php artisan tinker --execute="DB::connection()->getPdo(); echo \'DB OK\n\';"'                script {                    sh """                        curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \                        https:                        -d '{                            "state": "pending",                            "target_url": "'${BUILD_URL}'",                            "description": "Koneksi database berhasil diverifikasi",                            "context": "Jenkins/database"                        }'                    """                }            }        }        stage('Serve & Check') {            steps {                sh 'php artisan serve &'                sh 'sleep 5'                sh 'curl --fail --silent http:            }        }        stage('Deploy') {            steps {                script {                    sh """                        curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \                        https:                        -d '{                            "state": "pending",                            "target_url": "'${BUILD_URL}'",                            "description": "Proses deployment ke server ${BUILD_ENV} dimulai...",                            "context": "Jenkins/deployment"                        }'                    """                }                sshagent(['jenkins-ssh']) {                    sh '''# Set project path di satu tempatDEPLOY_PATH="/var/www/laravel-tmp"# Buat folder projectssh -o StrictHostKeyChecking=no www-data@192.168.1.101 "mkdir -p $DEPLOY_PATH"# Upload projectrsync -avz --exclude ".git" --exclude "node_modules" --exclude "tests" ./ www-data@192.168.1.101:$DEPLOY_PATH/# Install dependensi Laravelssh -o StrictHostKeyChecking=no www-data@192.168.1.101 "cd $DEPLOY_PATH && composer install --no-dev --optimize-autoloader"# Siapkan SQLite jika pakai sqlitessh -o StrictHostKeyChecking=no www-data@192.168.1.101 "[[ -f $DEPLOY_PATH/database/database.sqlite ]] || mkdir -p $DEPLOY_PATH/database && touch $DEPLOY_PATH/database/database.sqlite"# Deploy ke live path setelah semuanya siapssh -o StrictHostKeyChecking=no www-data@192.168.1.101 "mv /var/www/laravel /var/www/laravel-old || true"ssh -o StrictHostKeyChecking=no www-data@192.168.1.101 "mv $DEPLOY_PATH /var/www/laravel"ssh -o StrictHostKeyChecking=no www-data@192.168.1.101 "rm -rf /var/www/laravel-old || true"ssh -o StrictHostKeyChecking=no www-data@192.168.1.101 "chmod -R 775 /var/www/laravel/storage"# Sekarang jalankan perintah Laravel setelah pindah ke live pathssh -o StrictHostKeyChecking=no www-data@192.168.1.101 "cd /var/www/laravel && php artisan optimize:clear"ssh -o StrictHostKeyChecking=no www-data@192.168.1.101 "cd /var/www/laravel && php artisan optimize"ssh -o StrictHostKeyChecking=no www-data@192.168.1.101 "cd /var/www/laravel && php artisan migrate --force"ssh -o StrictHostKeyChecking=no www-data@192.168.1.101 "cd /var/www/laravel && php artisan config:cache"ssh -o StrictHostKeyChecking=no www-data@192.168.1.101 "cd /var/www/laravel && php artisan route:cache"ssh -o StrictHostKeyChecking=no www-data@192.168.1.101 "cd /var/www/laravel && php artisan view:cache"'''                }            }        }    }    post {        success {            echo 'Deployment successful!'            script {                def commit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()                                sh """        curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \        https:        -d '{            "state": "success",            "target_url": "${BUILD_URL}",            "description": "✅ CI/CD berhasil! Build ${BUILD_VERSION} berhasil di-deploy ke server ${BUILD_ENV} pada ${BUILD_TIME}",            "context": "Jenkins/build-and-deploy"        }'        """                sh """        curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \        https:        -d '{            "state": "success",            "target_url": "${BUILD_URL}",            "description": "✅ Instalasi dependensi PHP berhasil",            "context": "Jenkins/dependencies"        }'        """                sh """        curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \        https:        -d '{            "state": "success",            "target_url": "${BUILD_URL}",            "description": "✅ Build frontend berhasil",            "context": "Jenkins/frontend"        }'        """                sh """        curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \        https:        -d '{            "state": "success",            "target_url": "${BUILD_URL}",            "description": "✅ Koneksi database berhasil terverifikasi",            "context": "Jenkins/database"        }'        """                sh """        curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \        https:        -d '{            "state": "success",            "target_url": "${BUILD_URL}",            "description": "✅ Deployment ke server ${BUILD_ENV} berhasil",            "context": "Jenkins/deployment"        }'        """                                def deploymentId = sh(                    script: """curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" \                -H "Accept: application/vnd.github.v3+json" \                https:                -d '{                    "ref": "${commit}",                    "environment": "production",                    "auto_merge": false,                    "required_contexts": [],                    "description": "Deployment ke production oleh Jenkins"                }' | jq -r '.id'""",                    returnStdout: true                ).trim()                                sh """        curl -X POST -H "Authorization: token ${GITHUB_TOKEN}" \        -H "Accept: application/vnd.github.v3+json" \        https:        -d '{            "state": "success",            "log_url": "${BUILD_URL}",            "target_url": "https:            "description": "Build dan deploy ke production berhasil",            "environment": "production",            "environment_url": "https:        }'        """            }        }        failure {            echo 'Deployment failed!'                        script {                def failureStage = currentBuild.result ? "unknown": env.STAGE_NAME                                sh """            curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \            https:            -d '{                "state": "failure",                "target_url": "'${BUILD_URL}'",                "description": "❌ Build gagal pada tahap: ${failureStage}. Lihat log Jenkins untuk detail error.",                "context": "Jenkins/build-and-deploy"            }'            """                                sh """            curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \            https:            -d '{                "state": "failure",                "target_url": "'${BUILD_URL}'",                "description": "❌ Build gagal pada tahap: ${failureStage}.",                "context": "Jenkins/dependencies"            }'            """                sh """            curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \            https:            -d '{                "state": "failure",                "target_url": "'${BUILD_URL}'",                "description": "❌ Build gagal pada tahap: ${failureStage}.",                "context": "Jenkins/frontend"            }'            """                sh """            curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \            https:            -d '{                "state": "failure",                "target_url": "'${BUILD_URL}'",                "description": "❌ Build gagal pada tahap: ${failureStage}.",                "context": "Jenkins/database"            }'            """                sh """            curl -XPOST -H "Authorization: token ${GITHUB_TOKEN}" \            https:            -d '{                "state": "failure",                "target_url": "'${BUILD_URL}'",                "description": "❌ Build gagal pada tahap: ${failureStage}.",                "context": "Jenkins/deployment"            }'            """            }        }        always {                        emailext (                subject: "Build ${currentBuild.currentResult}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",                body: """<p>Build ${currentBuild.currentResult}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>            <p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",                recipientProviders: [[$class: 'DevelopersRecipientProvider']]            )        }    }}
